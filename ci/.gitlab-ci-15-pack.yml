pack-dac:
  stage: pack
  tags: [macos-arm64]
  variables:
    qtpath: /Users/gitlab/Qt/6.4.3/macos/bin
  needs: [build-dac]
  script:
    - WORKSPACE=$(pwd)
    - PATH="${qtpath}:${PATH}"
    - cd build/src/bin
    - macdeployqt "mii.app" -always-overwrite
    - codesign --sign ${GAMS_CODESIGN_IDENTITY} --options runtime --force --deep --timestamp --entitlements $WORKSPACE/platform/macos/gams-mii.entitlements.plist "mii.app"
    - hdiutil create -volname "mii" -srcfolder "mii.app" -ov -fs HFS+ -format UDZO "mii.dmg"  
    - codesign --verify --verbose mii.app
    - mv "mii.dmg" "$WORKSPACE/GAMS-MII-dac-arm_64.dmg"
    - cd ${WORKSPACE}
    - DMG_NAME=GAMS-MII-dac-arm_64.dmg
    # leave pipeline if it is not a Release, Release Tag or RC build
    - |+
      if [[ ! ${CI_COMMIT_REF_NAME} =~ ^v[0-9]+\\.[0-9]+\\.[0-9]+$ ]] && [[ ! ${CI_COMMIT_REF_NAME} =~ .*-release$ ]] && [[ ! ${CI_COMMIT_REF_NAME} =~ .*-rc$ ]]; then
        echo "Notarization skipped!" > upload.log
        echo "Notarization skipped!" > report.xml
        cat upload.log
        cat report.xml
        exit 0;
      fi
    # notarize dmg
    - |+
      if xcrun notarytool submit $DMG_NAME --team-id ${GAMS_CODESIGN_IDENTITY} --apple-id ${GAMS_APPLEID_USER} --password ${GAMS_APPLEID_PASSWORD} --wait --timeout 30m
      then
        echo "Notarization successful"
      else
        echo "Notarization failed"
        exit 1
      fi
    - |+
      if xcrun stapler staple $DMG_NAME
      then
        echo "Stapled ticket to app bundle"
      else
        echo "Stapling failed"
        exit 1
      fi
  artifacts:
    name: "GAMS-MII-dac-arm_64"
    paths: ['GAMS-MII-dac-arm_64.dmg']
    expose_as: 'GAMS-MII-dac-arm_64'
    expire_in: 1 days

pack-deg:
  stage: pack
  tags: [macos]
  variables:
    qtpath: /Users/gitlab/Qt/6.4.3/macos/bin
  needs: [build-deg]
  script:
    - WORKSPACE=$(pwd)
    - PATH="${qtpath}:${PATH}"
    - cd build/src/bin
    - ls -al
    - macdeployqt "mii.app" -always-overwrite
    - ls -al
    - codesign --sign ${GAMS_CODESIGN_IDENTITY} --options runtime --force --deep --timestamp --entitlements $WORKSPACE/platform/macos/gams-mii.entitlements.plist "mii.app"
    - hdiutil create -volname "mii" -srcfolder "mii.app" -ov -fs HFS+ -format UDZO "mii.dmg"  
    - codesign --verify --verbose mii.app
    - mv "mii.dmg" "$WORKSPACE/GAMS-MII-deg-x86_64.dmg"
    - cd ${WORKSPACE}
    - DMG_NAME=GAMS-MII-deg-x86_64.dmg
    # leave pipeline if it is not a Release, Release Tag or RC build
    - |+
      if [[ ! ${CI_COMMIT_REF_NAME} =~ ^v[0-9]+\\.[0-9]+\\.[0-9]+$ ]] && [[ ! ${CI_COMMIT_REF_NAME} =~ .*-release$ ]] && [[ ! ${CI_COMMIT_REF_NAME} =~ .*-rc$ ]]; then
        echo "Notarization skipped!" > upload.log
        echo "Notarization skipped!" > report.xml
        cat upload.log
        cat report.xml
        exit 0;
      fi
    # notarize dmg
    - |+
      if xcrun notarytool submit $DMG_NAME --team-id ${GAMS_CODESIGN_IDENTITY} --apple-id ${GAMS_APPLEID_USER} --password ${GAMS_APPLEID_PASSWORD} --wait --timeout 30m
      then
        echo "Notarization successful"
      else
        echo "Notarization failed"
        exit 1
      fi
    - |+
      if xcrun stapler staple $DMG_NAME
      then
        echo "Stapled ticket to app bundle"
      else
        echo "Stapling failed"
        exit 1
      fi
  artifacts:
    name: "GAMS-MII-deg-x86_64"
    paths: ['GAMS-MII-deg-x86_64.dmg']
    expose_as: 'GAMS-MII-deg-x86_64'
    expire_in: 1 days

pack-leg:
  stage: pack
  tags: [linux]
  image:
    name: $GAMS_CONTAINER_REGISTRY/qt-machines/leg/builder-qt6:latest
    entrypoint: [""]   # prevent startup.sh
  needs: [build-leg]
  variables:
    qtpath: /opt/Qt/6.4.2/bin
  script:
    # setup environment
    - PATH="${qtpath}:${PATH}"
    # create folder structure
    - mkdir -p appdir/usr/bin
    - mkdir -p appdir/usr/share/pixmaps
    - mkdir -p appdir/usr/resources
    # collect files
    - cp build/src/bin/mii appdir/usr/bin/
    - cp -r icons/* appdir/usr/share/pixmaps
    - cp platform/linux/gams-mii.desktop appdir/usr/share/gams-mii.desktop
    # build the AppImage
    - export VERSION=""
    - /opt/linuxdeploy/linuxdeploy-x86_64.AppImage --appdir=appdir --plugin=qt --output=appimage --desktop-file=appdir/usr/share/gams-mii.desktop
    - mv GAMS_MII--x86_64.AppImage GAMS-MII-leg-x86_64.AppImage
  artifacts:
    name: "GAMS-MII-leg-x86_64"
    paths: ['GAMS-MII-leg-x86_64.AppImage']
    expose_as: 'GAMS-MII-leg-x86_64'
    expire_in: 1 days

pack-wei:
  stage: pack
  tags: [windows]
  image:
    name: $GAMS_CONTAINER_REGISTRY/qt-machines/wei/builder-qt6:latest
  needs: [build-wei]
  variables:
    vcinsdir: C:\Program Files\Microsoft Visual Studio\2022\Community\VC
    cmd_vcvars: C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvars64.bat
  script:
    - $env:VCINSTALLDIR = "$vcinsdir"
    - $env:Path = "C:\Qt\6.4.2\msvc2019_64\bin;" + $env:Path
    - '& $cmd_vcvars'
    - mkdir mii
    - cp "/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Redist/MSVC/14.29.30133/x64/Microsoft.VC142.CRT/*" "mii"
    - cp "/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Redist/MSVC/14.29.30133/vc_redist.x64.exe" "mii"
    - cp build/src/bin/* mii
    - cd mii
    - 'windeployqt --release --compiler-runtime --force mii.exe'
    - echo $GAMS_COMODO_CERT | out-file -encoding ascii comodo_code.dat
    - $data = (
      'import base64;',
      'import sys;',
      'base64.decode(open(sys.argv[1], ''rb''), open(sys.argv[2], ''wb''))'
      )
    - $data | out-file -encoding ascii test.py
    - python test.py comodo_code.dat comodo_cert.p12
    - signtool sign /v /f comodo_cert.p12 /p $GAMS_COMODO_CERT_PASSWORD /t http://timestamp.comodoca.com mii.exe
    - rm comodo_code.dat
    - rm comodo_cert.p12
    - cd ..
    - Compress-Archive -Path mii -DestinationPath GAMS-MII-wei-x86_64.zip
  artifacts:
    name: "GAMS-MII-wei-x86_64"
    paths: ['GAMS-MII-wei-x86_64.zip']
    expose_as: 'GAMS-MII-wei-x86_64'
    expire_in: 1 days
